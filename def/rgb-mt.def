Bootstrap: localimage
From: {{BASE}}

%arguments
    BASE=

%post
    apt -y update
    apt -y upgrade
    apt -y install libtbb-dev
    apt -y autopurge
    apt clean

    cd /opt

    VECGEOM_CMAKE_OPTIONS="-DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_STANDARD=17 -DCMAKE_CXX_STANDARD=20 -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON -DBUILD_SHARED_LIBS=OFF -DVECGEOM_BACKEND=Vc -DVECGEOM_GDML=ON -DVECGEOM_FAST_MATH=ON"
    cd vecgeom-build

    mkdir build-x86-64-v3
    cd build-x86-64-v3
    cmake -G Ninja ../src/ $VECGEOM_CMAKE_OPTIONS -DCMAKE_INSTALL_PREFIX=/opt/x86-64-v3/vecgeom -DCMAKE_C_FLAGS='-march=x86-64-v3' -DCMAKE_CXX_FLAGS='-march=x86-64-v3' -DVECGEOM_VECTOR=avx2 -DTARGET_ARCHITECTURE=x86-64-v3
    ninja
    ninja install
    cd ..

    mkdir build-x86-64-v2
    cd build-x86-64-v2
    cmake -G Ninja ../src/ $VECGEOM_CMAKE_OPTIONS -DCMAKE_INSTALL_PREFIX=/opt/x86-64-v2/vecgeom -DCMAKE_C_FLAGS='-march=x86-64-v2' -DCMAKE_CXX_FLAGS='-march=x86-64-v2' -DVECGEOM_VECTOR=sse4.2 -DTARGET_ARCHITECTURE=x86-64-v2
    ninja
    ninja install
    cd ..

    cd ..
    rm -rf vecgeom-build

    ROOT_CMAKE_OPTIONS="-DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_STANDARD=17 -DCMAKE_CXX_STANDARD=20 -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON -Dfftw3=ON -Dgviz=ON -Dmathmore=ON -Dmpi=ON -Dqt5web=ON -Dunuran=OFF -During=ON -Dvecgeom=ON"
    cd root-build

    VECGEOM_DIR=/opt/x86-64-v3/vecgeom
    export LIBRARY_PATH=$VECGEOM_DIR/lib:$LIBRARY_PATH
    export LD_LIBRARY_PATH=$VECGEOM_DIR/lib:$LD_LIBRARY_PATH
    export CMAKE_PREFIX_PATH=$VECGEOM_DIR:$CMAKE_PREFIX_PATH
    mkdir build-x86-64-v3
    cd build-x86-64-v3
    cmake -G Ninja ../src/ $ROOT_CMAKE_OPTIONS -DCMAKE_INSTALL_PREFIX=/opt/x86-64-v3/root -DCMAKE_C_FLAGS='-march=x86-64-v3' -DCMAKE_CXX_FLAGS='-march=x86-64-v3' -DTARGET_ARCHITECTURE=x86-64-v3
    ninja
    ninja install
    cd ..

    VECGEOM_DIR=/opt/x86-64-v2/vecgeom
    export LIBRARY_PATH=$VECGEOM_DIR/lib:$LIBRARY_PATH
    export LD_LIBRARY_PATH=$VECGEOM_DIR/lib:$LD_LIBRARY_PATH
    export CMAKE_PREFIX_PATH=$VECGEOM_DIR:$CMAKE_PREFIX_PATH
    mkdir build-x86-64-v2
    cd build-x86-64-v2
    cmake -G Ninja ../src/ $ROOT_CMAKE_OPTIONS -DCMAKE_INSTALL_PREFIX=/opt/x86-64-v2/root -DCMAKE_C_FLAGS='-march=x86-64-v2' -DCMAKE_CXX_FLAGS='-march=x86-64-v2' -DTARGET_ARCHITECTURE=x86-64-v2
    ninja
    ninja install
    cd ..

    cd ..
    rm -rf root-build

    GEANT4_CMAKE_OPTIONS="-DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_STANDARD=17 -DCMAKE_CXX_STANDARD=20 -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON -DGEANT4_INSTALL_DATADIR=/opt/geant4-data -DGEANT4_USE_GDML=ON -DGEANT4_USE_OPENGL_X11=ON -DGEANT4_USE_QT=ON -DGEANT4_USE_RAYTRACER_X11=ON -DGEANT4_USE_SYSTEM_ZLIB=ON -DBUILD_SHARED_LIBS=OFF -DBUILD_STATIC_LIBS=ON -DGEANT4_INSTALL_PACKAGE_CACHE=OFF -DGEANT4_INSTALL_DATASETS_TENDL=ON -DGEANT4_USE_TBB=ON -DGEANT4_USE_USOLIDS=ON"
    cd geant4-build

    VECGEOM_DIR=/opt/x86-64-v3/vecgeom
    export LIBRARY_PATH=$VECGEOM_DIR/lib:$LIBRARY_PATH
    export LD_LIBRARY_PATH=$VECGEOM_DIR/lib:$LD_LIBRARY_PATH
    export CMAKE_PREFIX_PATH=$VECGEOM_DIR:$CMAKE_PREFIX_PATH
    mkdir build-x86-64-v3
    cd build-x86-64-v3
    cmake -G Ninja ../src/ $GEANT4_CMAKE_OPTIONS -DCMAKE_INSTALL_PREFIX=/opt/x86-64-v3/geant4 -DCMAKE_C_FLAGS='-march=x86-64-v3' -DCMAKE_CXX_FLAGS='-march=x86-64-v3' -DTARGET_ARCHITECTURE=x86-64-v3
    ninja
    ninja install
    cd ..

    VECGEOM_DIR=/opt/x86-64-v2/vecgeom
    export LIBRARY_PATH=$VECGEOM_DIR/lib:$LIBRARY_PATH
    export LD_LIBRARY_PATH=$VECGEOM_DIR/lib:$LD_LIBRARY_PATH
    export CMAKE_PREFIX_PATH=$VECGEOM_DIR:$CMAKE_PREFIX_PATH
    mkdir build-x86-64-v2
    cd build-x86-64-v2
    cmake -G Ninja ../src/ $GEANT4_CMAKE_OPTIONS -DCMAKE_INSTALL_PREFIX=/opt/x86-64-v2/geant4 -DCMAKE_C_FLAGS='-march=x86-64-v2' -DCMAKE_CXX_FLAGS='-march=x86-64-v2' -DTARGET_ARCHITECTURE=x86-64-v2
    ninja
    ninja install
    cd ..
    cd ..
    rm -rf geant4-build

%environment
    cpu_has_feature() {
        if test -n "$(cat /proc/cpuinfo | grep flags | grep $1)"; then
            # 0 = true
            return 0
        else
            # 1 = false
            return 1
        fi
    }

    if cpu_has_feature avx && cpu_has_feature avx2 && cpu_has_feature bmi && cpu_has_feature bmi2 && cpu_has_feature f16c && cpu_has_feature fma; then
        RUNTIME_CPU_ARCH=x86-64-v3
    elif cpu_has_feature sse3 && cpu_has_feature sse4.1 && cpu_has_feature sse4.2 && cpu_has_feature ssse3; then
        RUNTIME_CPU_ARCH=x86-64-v2
    else
        echo "Warning: It seems that even x86-64-v2 is not available. Try another machine if you cannot run."
        RUNTIME_CPU_ARCH=x86-64-v2
    fi

    VECGEOM_DIR=/opt/$RUNTIME_CPU_ARCH/vecgeom
    GEANT4_DIR=/opt/$RUNTIME_CPU_ARCH/geant4
    ROOT_DIR=/opt/$RUNTIME_CPU_ARCH/root
    export PATH=$GEANT4_DIR/bin:$ROOT_DIR/bin:$PATH
    export LIBRARY_PATH=$VECGEOM_DIR/lib:$GEANT4_DIR/lib:$ROOT_DIR/lib:$LIBRARY_PATH
    export LD_LIBRARY_PATH=$VECGEOM_DIR/lib:$GEANT4_DIR/lib:$ROOT_DIR/lib:$LD_LIBRARY_PATH
    export PYTHONPATH=$ROOT_DIR/lib:$PYTHONPATH
    export MANPATH=$ROOT_DIR/man:$MANPATH
    export CMAKE_PREFIX_PATH=$VECGEOM_DIR:$GEANT4_DIR:$ROOT_DIR:$CMAKE_PREFIX_PATH
    export JUPYTER_PATH=$ROOT_DIR/etc/notebook:$JUPYTER_PATH
    export JUPYTER_CONFIG_DIR=$ROOT_DIR/etc/notebook:$JUPYTER_CONFIG_DIR
    export ROOTSYS=$ROOT_DIR
    export CLING_STANDARD_PCH=none
